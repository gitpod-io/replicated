# The installer job is where the magic happens. It generates
# the config, installs Gitpod and then deletes itself when
# it's finished
apiVersion: batch/v1
kind: Job
metadata:
  name: installer
  labels:
    app: gitpod
    component: gitpod-installer
spec:
  ttlSecondsAfterFinished: 60
  template:
    metadata:
      labels:
        app: gitpod
        component: gitpod-installer
    spec:
      serviceAccountName: installer
      restartPolicy: OnFailure
      initContainers:
        # Checks that the cert-manager installation is complete
        - name: cert-manager
          image: alpine/helm
          command:
            - /bin/sh
            - -c
          args:
            - |
              set -e

              echo "Gitpod: Install jq"
              apk add --no-cache jq

              echo "Gitpod: Perform the check"
              while [ "$(helm status -n {{repl Namespace }} cert-manager -o json | jq '.info.status == "deployed"')" = "false" ];
              do
                echo "Gitpod: Release not found - will retry in 10s"
                sleep 10
              done

              echo "Gitpod: Release found - goodbye"
      containers:
        - name: installer
          # Normally, this would be a release but this has additions for Replicated from 2022.01
          image: eu.gcr.io/gitpod-core-dev/build/installer:main.2316
          volumeMounts:
            - mountPath: /config
              name: config
              readOnly: false
          env:
            - name: CONFIG_FILE
              value: /config/config.yaml
          command:
            - /bin/sh
            - -c
          args:
            - |
              set -e

              echo "Gitpod: Generate the base Installer config"
              /app/installer init > "${CONFIG_FILE}"

              echo "Gitpod: Inject the Replicated variables into the config"
              yq e -i '.domain = "{{repl ConfigOption "domain" }}"' "${CONFIG_FILE}"

              if [ '{{repl and (ConfigOptionEquals "db_incluster" "0") (ConfigOptionEquals "db_cloudsql_enabled" "1") }}' = "true" ];
              then
                echo "Gitpod: configuring CloudSQLProxy"

                yq e -i ".database.inCluster = false" "${CONFIG_FILE}"
                yq e -i ".database.cloudSQL.instance = \"{{repl ConfigOption "db_cloudsql_instance" }}\"" "${CONFIG_FILE}"
                yq e -i ".database.cloudSQL.serviceAccount.kind = \"secret\"" "${CONFIG_FILE}"
                yq e -i ".database.cloudSQL.serviceAccount.name = \"cloudsql\"" "${CONFIG_FILE}"
              fi

              if [ '{{repl and (ConfigOptionEquals "db_incluster" "0") (ConfigOptionEquals "db_cloudsql_enabled" "0") }}' = "true" ];
              then
                echo "Gitpod: configuring external database"

                yq e -i ".database.inCluster = false" "${CONFIG_FILE}"
                yq e -i ".database.external.certificate.kind = \"secret\"" "${CONFIG_FILE}"
                yq e -i ".database.external.certificate.name = \"database\"" "${CONFIG_FILE}"
              fi

              if [ '{{repl ConfigOptionEquals "reg_incluster" "0" }}' = "true" ];
              then
                echo "Gitpod: configuring external container registry"

                yq e -i ".containerRegistry.inCluster = false" "${CONFIG_FILE}"
                yq e -i ".containerRegistry.external.url = \"{{repl ConfigOption "reg_url" }}\"" "${CONFIG_FILE}"
                yq e -i ".containerRegistry.external.certificate.kind = \"secret\"" "${CONFIG_FILE}"
                yq e -i ".containerRegistry.external.certificate.name = \"container-registry\"" "${CONFIG_FILE}"

              if [ '{{repl ConfigOptionEquals "reg_s3storage" "1" }}' = "true" ];
                then
                  echo "Gitpod: configuring container registry S3 backend"

                  yq e -i ".containerRegistry.s3storage.bucket = \"{{repl ConfigOption "reg_bucketname" }}\"" "${CONFIG_FILE}"
                  yq e -i ".containerRegistry.s3storage.certificate.kind = \"secret\"" "${CONFIG_FILE}"
                  yq e -i ".containerRegistry.s3storage.certificate.name = \"container-registry-s3-backend\"" "${CONFIG_FILE}"
                fi
              fi

              echo "Gitpod: Generate the Kubernetes objects and apply"
              /app/installer render -c "${CONFIG_FILE}" --namespace {{repl Namespace }} | kubectl apply -f -

              echo "Gitpod: Delete Installer resources - prevents the elevated privileges being used and abused"
              kubectl delete serviceaccount installer -n {{repl Namespace }}

              echo "Gitpod: Installer job finished - goodbye"
      volumes:
        - name: config
          emptyDir: {}
